// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tafsir.sql

package db

import (
	"context"
	"database/sql"
)

const checkTafsirExists = `-- name: CheckTafsirExists :one
SELECT EXISTS (
    SELECT 1
    FROM tafsir
    WHERE user_id = $1
      AND DATE(created_at) = CURRENT_DATE
)
`

func (q *Queries) CheckTafsirExists(ctx context.Context, userID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTafsirExists, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getTafsirData = `-- name: GetTafsirData :many
select created_at from tafsir where user_id = $1 and done = true
`

func (q *Queries) GetTafsirData(ctx context.Context, userID int64) ([]sql.NullTime, error) {
	rows, err := q.db.QueryContext(ctx, getTafsirData, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullTime
	for rows.Next() {
		var created_at sql.NullTime
		if err := rows.Scan(&created_at); err != nil {
			return nil, err
		}
		items = append(items, created_at)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertTafsirDone = `-- name: UpsertTafsirDone :exec
INSERT INTO tafsir (user_id, done)
VALUES ($1, TRUE)
`

func (q *Queries) UpsertTafsirDone(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, upsertTafsirDone, userID)
	return err
}
